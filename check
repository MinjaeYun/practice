* check difference between ddtiming and bacondecomp (Stata packages)
program define bacondecomp, eclass
  version 10.2
  
 syntax [varlist] [if] [in] [aw fw pw iw/] [, Msymbols(string) MColors(string) MSIZes(string) DDLine(string) noLine noNOte cvc within GROpt(string asis) noLEGend noGRaph stub(string) forcebalance(int 2) compare(string) txtformat(string) txtformat2(string) comparenox DDetail debug * ]
 marksample touse
******************************
*parse the varlist into y (outcome), tr (treatment dummy), x (controls)  
******************************
 gettoken y rest: varlist
 gettoken tr x: rest
******************************
* Check data xtset and strongly balanced; issue error messages if not xtset or not balanced
******************************
 qui xtset
 loc i=r(panelvar) 
 loc t=r(timevar)
 loc b=r(balanced)
 if "`i'"=="" | "`t'"=="" | "`i'"=="." | "`t'"=="." {
  di as err "Both panel and time variables must be set"
  err 459
  }
 qui xtset
 if "`b'"!="strongly balanced" {
  di as err "Panel must be strongly balanced, i.e. each panel must have the same set of time points"
  }
******************************
*if no controls or weights, and ddetail option specified, do local version of ddtiming
******************************
 if ("`x'"=="" & "`exp'"=="") & "`ddetail'"!="" {
  baconddtiming `y' `tr', i(`i') t(`t') ms(`msymbols') mc(`mcolors') msiz(`msizes') `line' ddli(`ddline') stub(`stub') `options' 
  }
 if !("`x'"=="" & "`exp'"=="") & "`ddetail'"!="" {
  di as err "ddetail option currently only works without weights and adjustment for control variables"
  err 198 
  }
******************************
* add this functionality in next release, also no-control compare option
******************************
 if ("`x'"=="") & "`ddetail'"=="" {
  di as err "with no control variables, must specify the ddetail option currently (only works without weights)"
  err 198 
  }
 
if !("`x'"=="") {
******************************
*Create variables for graph STUB option in syntax; [stub] is prepended to any variables to be saved
******************************
 * (check stub variable does not exist, or create tempvars if stub not specified)
 if "`stub'"=="" {
  tempvar T C S B R2 g cgroup
  }
 else {
  loc T="`stub'T"
  loc C="`stub'C"
  loc S="`stub'S"
  loc B="`stub'B"
  loc R2="`stub'R2"
  loc g="`stub'gp"
  loc cgroup="`stub'cgroup"
  }
 foreach var in T C {
  qui g str1 ``var''=""
  }
 foreach var in S B R2 cgroup {
  qui g byte ``var''=.
  }
 la var `T' "Bacon decomp 2x2 treated group"
 la var `C' "Bacon decomp 2x2 control group"
 la var `S' "Bacon decomp 2x2 weight"
 la var `B' "Bacon decomp 2x2 coefficient"
 la var `R2' "Bacon decomp 2x2 R-squared"
 cap la var `g' "Bacon decomp timing group"
 la var `cgroup' "Bacon decomp aggregation group"
 
******************************
*Check strongly balanced in nonmissing obs
******************************
 markout `touse' `i' `t' `y' `tr' `x'

 qui xtset
 loc b=r(balanced)
 if "`b'"!="strongly balanced" {
  di as err "Panel must be strongly balanced, i.e. each panel must have the same set of time points"
  di as err "with nonmissing data on panel id, time, and covariates"
  di as txt "(panels are said to be strongly balanced if each panel contains the same time points,"
  di as txt "weakly balanced if each panel contains the same number of observations but not the same"
  di as txt "time points, and unbalanced otherwise); see also " as smcl "{mansection XT xtset}"
  err 459
  }
******************************
* Check treatment weakly increasing in time
* will change after possibly working out 
* details of treatment turning on and off in a future paper
******************************
 tempvar negt first last jump
 qui {
  gen `negt'=-`t'
  bys `touse' `i' (`negt'): g `first'=`tr'[_N]
  bys `touse' `i' (`t'): g `last'=`tr'[_N]
  bys `touse' `i' (`t'): g `jump'=`tr'-`tr'[_n-1] if `touse'
  }
 su `last', mean
 if (r(max)!=1) | !inlist(r(min),0,1) {
  di as err "Treatment variable `tr' does not have a maximum of one in last period"
  di as err "or has a minimum not either one or zero in last period"
  err 459
  }
 su `first', mean
 if (r(min)!=0) | !inlist(r(max),0,1) {
  di as err "Treatment variable `tr' does not have a minimum of zero in first period"
  di as err "or has a maximum not either one or zero in first period"
  err 459
  }
 su `jump', mean
 if (r(min)!=0) | (r(max)!=1) {
  di as err "Treatment variable `tr' does not weakly increase (0->1) over time periods"
  err 459
  }
******************************
 * Create variables for onset and timing groups (for dyads), calculations
 * this is like reverse engineering the t* variable from D
******************************
 tempvar t1 onset never always samp
 qui {
  bys `touse' `i' (`t'): g `always'=(`tr'[1]==`tr'[_N]) & `tr'[1]==1 if `touse'
  bys `touse' `i' (`t'): g `never'=(`tr'[1]==`tr'[_N]) & `tr'[1]==0 if `touse'
  bys `touse' `i' (`t'): g `t1'=`t' if `jump'==1 & `touse'
  bys `touse' `i' (`t1'): g `onset'=`t1'[1] if `touse'
******************************
* Just make a consecutive variable for groups
* to make it easier to loop through and map to observation numbers
******************************
  qui egen long `g'=group(`onset'), lab
  su `g', mean
  loc ntimegps=r(max)
  loc alwaysnever=0
******************************
* put always treated units at the end of the list of groups
******************************
  loc anyalways=0
  count if `always'==1
  if r(N)>0 {
    qui replace `g'=`ntimegps'+1 if `always'==1
   la def `g' `=`ntimegps'+1' "Always", modify
   su `g', mean
   loc ntimegps=r(max)
   loc alwaysnever=`alwaysnever'+1
   loc anyalways=1
   }
******************************
* put never treated units at the end of the list of groups (after always)
******************************
  count if `never'==1
  if r(N)>0 {  
   qui replace `g'=`ntimegps'+1 if `never'==1
   la def `g' `=`ntimegps'+1' "Never", modify
   su `g', mean
   loc ntimegps=r(max)
   loc alwaysnever=`alwaysnever'+1
   loc anynever=1
   }
  qui compress `g'
  }
 * Mark sample to exclude cases with missing treatment onset
 markout `touse' `g'

 * Check treatment in {0,1} and restrict to balanced panel
 cap assert inlist(`tr',0,1) if `touse'
 if _rc!=0 {
  di as err "Treatment variable `tr' is not either 0 or 1 in all time periods in sample"
  err 459
  }
 qui levelsof `t' if `touse', loc(ts)
 qui foreach i of loc ts {
  tempvar time`i'
  g byte `time`i''=(`t'==`i') if `touse'
  la var `time`i'' "`t'==`i'" 
  loc timedummies `timedummies' `time`i''
  }
 if "`exp'"!="" {
  loc wtexp `"[`weight'=`exp']"'
  }
 else loc exp "1"
 
******************************
* Estimate DiD model
******************************
 qui xtreg `y' `tr' `x' `timedummies' `wtexp'  if `touse', fe `options'
 tempname DDest origb origv
 scalar `DDest'=_b[`tr']
 mat `origb'=e(b)
 mat `origv'=e(V)
 tempvar p d sumwt sumg samp Dtilde dp ptilde pgjtilde
 tempname VD Vb Vdp Rsq finals share BD Bp Beta finals

 * Frisch-Waugh-Lovell Regression
 qui xtreg `tr' `x' `timedummies' `wtexp' if `touse', fe `options'
 qui predict double `p' if e(sample)
 qui predict double `d' if e(sample), ue

******************************  
* collapse  x's and p to the group/year level
******************************  
 loc xglist
 foreach v in `x' `p' {
  qui {
   tempvar g`v'
   bys `touse' `g' `t':g double `sumg'=sum(`v'*`exp')
   by `touse'  `g' `t':g double `sumwt'=sum(`exp'/(`v'<.))
	by `touse'  `g' `t':g double `g`v''=`sumg'[_N]/`sumwt'[_N] if `touse'
   cap drop `sumg' `sumwt'
   if "`v'"!="`p'" loc xglist `xglist' `g`v''
   }
  }
 
******************************
* comparisons across all timing groups
* first tell user what is happening in case the regressions take a long time
******************************
loc index 1
di as txt "Computing decomposition across `ntimegps' timing groups"
if `alwaysnever'>0 {
 di as txt "including " cond("`anyalways'"=="1","an always-treated group","") cond(`alwaysnever'==2," and ","") cond("`anynever'"=="1","a never-treated group","")
 }
loc ncompare=`ntimegps' 
if `alwaysnever'>1 loc ncompare=`ntimegps'-1

* l is outer loop
* k loops up to l-1
forv it=2/`ntimegps' {
 forv jt=1/`=`it'-1' {
  loc itstring="`:lab `g' `it''"
  loc jtstring="`:lab `g' `jt''"
  qui g byte `samp' =((`g'==`it')|(`g'==`jt'))&`touse'
  su `samp' if `touse' [aw=`exp'], mean
  scalar `share' = r(mean)

******************************
* this is VD so it shouldn't have the x's partialled out
******************************
if !(`alwaysnever'>1 & `it'==`ntimegps' & `jt'==`ntimegps'-1) {
 *get dyad variance
 qui xtreg `tr' `timedummies' `wtexp' if `samp', fe `options'
 qui predict double `Dtilde' if e(sample), e
 qui sum `Dtilde' [aw=`exp']
 scalar `VD' = ((r(N)-1)/r(N))*r(Var)
 }
else {
 scalar `VD' = 0
 }
 
******************************  
* this code partials FE out of the GROUP-level x's, not indiv-level hence `g`var''
******************************
if !(`alwaysnever'>1 & `it'==`ntimegps' & `jt'==`ntimegps'-1) {
 local XXlist
 foreach var of varlist `x' {
  qui xtreg `g`var'' `timedummies' `wtexp' if `samp', fe `options'
  tempvar XX`var'
  qui predict double `XX`var'' if e(sample), e
  local XXlist `XXlist' `XX`var''
  }
 cap drop `pgjtilde'
 qui reg `Dtilde' `XXlist' [aw=`exp']
 scalar `Rsq' = e(r2)
 qui predict double `pgjtilde' if e(sample)
 drop `XXlist'
 *partialled out p in the dyad
 cap drop `ptilde'
 qui xtreg `g`p'' `timedummies' `wtexp' if `samp', fe `options'
 qui predict double `ptilde' if e(sample), e
 qui gen double `dp' = `pgjtilde' - `ptilde' if `samp'
 *get variance of "pg tilde" in the dyad
 qui sum `dp' [aw=`exp']
 scalar `Vdp' = ((r(N)-1)/r(N))*r(Var)		
 *weight: this is the variance of "dtilde" in the dyad.
 scalar `finals' = (`share')^2*((1-`Rsq')*`VD' + `Vdp')
 }
else {
 scalar `VD' = 0
 scalar `Vdp' = 0
 scalar `Rsq' = 0
 cap drop `ptilde'
 qui xtreg `g`p'' `timedummies' `wtexp' if `samp', fe `options'
 qui predict double `ptilde' if e(sample), e
 qui sum `ptilde' [aw=`exp']       
 scalar `Vb' = ((r(N)-1)/r(N))*r(Var) 
 *weight: this is the variance of "dtilde" in the dyad.
 scalar `finals' = (`share')^2*(`Vb')
 }

if !(`alwaysnever'>1 & `it'==`ntimegps' & `jt'==`ntimegps'-1) {
 ****get the proper X-adjusted dyad coef
 tempname BD Bb
 qui xtreg `y' `tr' `xglist' `timedummies' `wtexp' if `samp', fe `options'
 scalar `BD' = _b[`tr']
 qui xtreg `y' `dp' `timedummies' `wtexp' if `samp', fe `options'
 scalar `Bb' = _b[`dp']
 *The dyad "Beta" combines the proper controlled one and a term for how wrong the "FWL" coef is
 scalar `Beta' = ((1-`Rsq')*`VD'*`BD' + `Vdp'*`Bb')/((1-`Rsq')*`VD' + `Vdp')
 }
else {
 ****get the proper X-adjusted dyad coef
 * tempname BD Bb
 qui xtreg `y' `g`p'' `timedummies' `wtexp' if `samp', fe `options'
 scalar `Beta' = -_b[`g`p'']
 }

 qui {
  replace `T' = "`itstring'" in `index'
  replace `C' = "`jtstring'" in `index'
  replace `S' = `finals' in `index'
  replace `B' = `Beta' in `index'
  replace `R2' = `Rsq' in `index'
  replace `cgroup'=1*(!inlist("`itstring'","Always","Never")&!inlist("`jtstring'","Always","Never"))+2*inlist("Always","`itstring'","`jtstring'")+3*inlist("Never","`itstring'","`jtstring'")  in `index'
  loc index=`index'+1
  }		
 foreach name in samp Dtilde dp {
   cap drop ``name''
   }
  }
 }
lab def `cgroup' 1 "Timing groups" 2 "Always treated vs timing" 3 "Never treated vs timing" 4 "Within" 5 "Always vs never treated"
la val `cgroup' `cgroup'

******************************
* within part
******************************
tempname Bw Vw
tempvar pw
if `c(matsize)'<11000 cap set matsize 11000
qui xtreg `y' i.`g'##(`timedummies') `p' `wtexp' if `touse', fe `options'
scalar `Bw' = -_b[`p']
qui xtreg `p' i.`g'##(`timedummies') `wtexp' if `touse', fe `options'
qui predict double `pw' if e(sample), e
qui sum `pw' [aw=`exp']
scalar `Vw' = ((r(N)-1)/r(N))*r(Var)
qui replace `T' = "Within" in `index'
qui replace `C' = "" in `index'
qui replace `S' = `Vw' in `index'
qui replace `B' = `Bw' in `index'
qui replace `cgroup'=4 in `index'

 tempvar omega DD wgt sg
 tempname tb totals O
******************************
* rescale weights
******************************
 su `S' if (`T'~="Within"), mean
 scalar `tb'=r(sum)
 qui gen double `sg' = `S'/scalar(`tb') if `T'~="Within"
 su `S', mean
 scalar `totals' = r(sum)
 qui g double `omega'= 1-scalar(`tb')/scalar(`totals')
 su `omega', mean
 scalar `O' = r(sum)
 qui gen double `DD' = `sg'*(1-`O')*`B'*(`T'~="Within")+`O'*`B'*(`T'=="Within") if !mi(`S')
 qui gen double `wgt' = `S'/`totals' if !mi(`S')

******************************
 * Post estimates
******************************
 tempname postb postv diagv output output1 output2 sumcalc summary summary1 summary2 summary3
 forv ix=1/`index' {
  mat `sumcalc'=nullmat(`sumcalc')\(`=`cgroup'[`ix']',`=`B'[`ix']',`=`wgt'[`ix']')
  if (`=`cgroup'[`ix']')==4 loc winest=`=`B'[`ix']'
  if (`=`cgroup'[`ix']')==4 loc winwgt=`=`wgt'[`ix']'
  if (`=`cgroup'[`ix']')==5 loc cvcest=`=`B'[`ix']'
  if (`=`cgroup'[`ix']')==4 loc cvcwgt=`=`wgt'[`ix']'
  mat `postb'=nullmat(`postb'),`=`B'[`ix']'
  mat `postv'=nullmat(`postv'),`=`wgt'[`ix']'
  mat `output1'=nullmat(`output1'),`=`B'[`ix']'
  mat `output2'=nullmat(`output2'),`=`wgt'[`ix']'
  loc rname `rname' "`=`T'[`ix']'`=cond("`=`C'[`ix']'"=="","","_")'`=`C'[`ix']'"
  }
 if "`debug'"!="" di "sumcalc matrix"
 if "`debug'"!="" mat li `sumcalc'
 mata:st_matrix("`summary2'",panelsum(st_matrix("`sumcalc'")[.,3],panelsetup(st_matrix("`sumcalc'"),1)))
 mata:st_matrix("`summary1'",panelsum(st_matrix("`sumcalc'")[.,2],st_matrix("`sumcalc'")[.,3],panelsetup(st_matrix("`sumcalc'"),1)):/panelsum(st_matrix("`sumcalc'")[.,3],panelsetup(st_matrix("`sumcalc'"),1)))
 mata:st_matrix("`summary3'",panelsum(st_matrix("`sumcalc'")[.,1],panelsetup(st_matrix("`sumcalc'"),1)):/panelsum(st_matrix("`sumcalc'")[.,1]:<.,panelsetup(st_matrix("`sumcalc'"),1)))
 mat `summary'=`summary1',`summary2'
 if "`debug'"!=""  di "summary matrix"
 if "`debug'"!=""  mat li `summary'
 forv row=1/`=rowsof(`summary3')' {
  * T vs Never; T vs Always, Timing, Within, C vs C
  if `summary3'[`row',1]==1 loc sumrows `sumrows' "Timing_groups"
  if `summary3'[`row',1]==2 loc sumrows `sumrows' "Always_v_timing"
  if `summary3'[`row',1]==3 loc sumrows `sumrows' "Never_v_timing"
  if `summary3'[`row',1]==4 loc sumrows `sumrows' "Within"
  if `summary3'[`row',1]==5 loc sumrows `sumrows' "Always_v_never"
  }
 mat rownames `summary'=`sumrows'
 mat colnames `summary'=Beta TotalWeight
 mat `output'=`output1'',`output2''
 mat `diagv'=diag(`postv')
 mat rownames `postb'=y1
 mat colnames `postb'=`rname'
 mat rownames `output'=`rname'
 mat colnames `output'=DDest Weight
 mat colnames `postv'=`rname'
 mat rownames `diagv'=`rname'
 mat colnames `diagv'=`rname'
 qui count if `touse'
 loc N = r(N)
 tempname subsetb subsetv 
 matrix `subsetb' = `origb'[1,1]
 matrix `subsetv' = `origv'[1,1]
 mat rownames `subsetb'=y1
 mat colnames `subsetb'=`tr'
 mat rownames `subsetv'=`tr'
 mat colnames `subsetv'=`tr'
 if "`debug'"!="" di "subsetb matrix"
 if "`debug'"!=""  mat li `subsetb'
 if "`debug'"!="" di "subsetv matrix"
 if "`debug'"!=""  mat li `subsetv'
 eret post `subsetb' `subsetv', esample(`touse')
 ereturn scalar N = `N'
 ereturn matrix dd = `postb'
 ereturn matrix wt = `postv'
 ereturn matrix sumdd = `summary', copy
 ereturn local depvar "`y'"
 ereturn local version "1.0.0"
 ereturn local cmd "bacondecomp"
 ereturn local properties "b V"
 eret di, eform(`eform') level(`level') 
 matlist `summary', tw(20) tit(Bacon Decomposition) format(%12.0g) border(all)
 if "`debug'"!="" di "output matrix"
 if "`debug'"!=""  mat li `output'
  
******************************
* Graphs, if not suppressed with nograph option
******************************
if "`graph'"=="" {
 loc opt ytitle("2x2 DD Estimate") xtitle("Weight") ylabel(, nogrid) graphregion(fcolor(white) color(white) icolor(white) ) 
 *plotregion(margin(medsmall)) margin(small)
 if "`line'"=="" loc opt `opt' yline(`=`DDest'', lwidth(thick) `ddline') 
 loc capt `" "Overall DD Estimate = `: di `txtformat' `DDest''" "'
 if `alwaysnever'==2 & "`cvc'"=="" {
  loc capt `"`capt' "Always vs never treated = `: di `txtformat' `cvcest'' (weight = `: di `txtformat' `cvcwgt'')""'
  }
 if "`within'"=="" {
  loc capt `"`capt' "Within component = `: di `txtformat' `winest'' (weight = `: di `txtformat' `winwgt'')""'
  }
 loc opt `"`opt' caption(`capt')"'
 if "`debug'"!=""  di `"`opt'"'
 qui levelsof `cgroup', loc(cgroups)
 loc cc 1
 if "`msymbols'"=="" loc msymbols "oh t x d dh dh dh dh"
 if "`mcolors'"=="" loc mcolors "black gray black black black black black"
 if "`msizes'"=="" loc msizes "large large large large large large large large large"
 foreach c of loc cgroups {
  if "`cvc'"=="" & "`cc'"=="5" continue
  if "`within'"=="" & "`cc'"=="4" continue
  loc sym: word `cc' of `msymbols'
  loc col: word `cc' of `mcolors'
  loc siz: word `cc' of `msizes'
  loc sc `sc' sc `B' `wgt' if `cgroup'==`c', msym(`sym') msize(`siz') mcolor(`col')||
  loc cc=`cc'+1
  }
 if "`legend'"=="" & `alwaysnever'==2 {
  loc opt `opt' leg(lab(1 "Timing groups") lab(2 "Always treated vs timing") lab(3 "Never treated vs timing") lab(4 "Always vs never treated") lab(5 "Within"))
  }
 if "`legend'"=="" & `alwaysnever'==1 & `anyalways'==1 {
  loc opt `opt' leg(lab(1 "Timing groups") lab(2 "Always treated vs timing") lab(3 "Within"))
  }
 if "`legend'"=="" & `alwaysnever'==1 & `anynever'==1 {
  loc opt `opt' leg(lab(1 "Timing groups") lab(2 "Never treated vs timing") lab(3 "Within"))
  }
 if "`legend'"=="" & `alwaysnever'==0 {
  loc opt `opt' leg(off)
  }
 `sc', `opt' `gropt' 
 }
}

end
